// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// pdist_intrinsic
arma::mat pdist_intrinsic(arma::cube X, std::string mfdname);
RcppExport SEXP _RiemBaseExt_pdist_intrinsic(SEXP XSEXP, SEXP mfdnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type mfdname(mfdnameSEXP);
    rcpp_result_gen = Rcpp::wrap(pdist_intrinsic(X, mfdname));
    return rcpp_result_gen;
END_RCPP
}
// pdist_extrinsic
arma::mat pdist_extrinsic(arma::cube X, std::string mfdname);
RcppExport SEXP _RiemBaseExt_pdist_extrinsic(SEXP XSEXP, SEXP mfdnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type mfdname(mfdnameSEXP);
    rcpp_result_gen = Rcpp::wrap(pdist_extrinsic(X, mfdname));
    return rcpp_result_gen;
END_RCPP
}
// convert_3toM
arma::mat convert_3toM(arma::cube X, std::string mfdname);
RcppExport SEXP _RiemBaseExt_convert_3toM(SEXP XSEXP, SEXP mfdnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type mfdname(mfdnameSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_3toM(X, mfdname));
    return rcpp_result_gen;
END_RCPP
}
// cpp_equivariant
arma::mat cpp_equivariant(arma::cube X, std::string mfdname);
RcppExport SEXP _RiemBaseExt_cpp_equivariant(SEXP XSEXP, SEXP mfdnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type mfdname(mfdnameSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_equivariant(X, mfdname));
    return rcpp_result_gen;
END_RCPP
}
// cpp_distint
arma::mat cpp_distint(arma::cube X, std::string mfdname);
RcppExport SEXP _RiemBaseExt_cpp_distint(SEXP XSEXP, SEXP mfdnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type mfdname(mfdnameSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_distint(X, mfdname));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dist2int
arma::mat cpp_dist2int(arma::cube X, arma::cube Y, std::string mfdname);
RcppExport SEXP _RiemBaseExt_cpp_dist2int(SEXP XSEXP, SEXP YSEXP, SEXP mfdnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< std::string >::type mfdname(mfdnameSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dist2int(X, Y, mfdname));
    return rcpp_result_gen;
END_RCPP
}
// cpp_distext
arma::mat cpp_distext(arma::cube X, std::string mfdname);
RcppExport SEXP _RiemBaseExt_cpp_distext(SEXP XSEXP, SEXP mfdnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type mfdname(mfdnameSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_distext(X, mfdname));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dist2ext
arma::mat cpp_dist2ext(arma::cube X, arma::cube Y, std::string mfdname);
RcppExport SEXP _RiemBaseExt_cpp_dist2ext(SEXP XSEXP, SEXP YSEXP, SEXP mfdnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< std::string >::type mfdname(mfdnameSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dist2ext(X, Y, mfdname));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dispersion
arma::mat cpp_dispersion(arma::cube X, arma::mat xmean, std::string mfdname);
RcppExport SEXP _RiemBaseExt_cpp_dispersion(SEXP XSEXP, SEXP xmeanSEXP, SEXP mfdnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xmean(xmeanSEXP);
    Rcpp::traits::input_parameter< std::string >::type mfdname(mfdnameSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dispersion(X, xmean, mfdname));
    return rcpp_result_gen;
END_RCPP
}
// frechet_extrinsic
Rcpp::List frechet_extrinsic(arma::cube X, std::string mfdname);
RcppExport SEXP _RiemBaseExt_frechet_extrinsic(SEXP XSEXP, SEXP mfdnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type mfdname(mfdnameSEXP);
    rcpp_result_gen = Rcpp::wrap(frechet_extrinsic(X, mfdname));
    return rcpp_result_gen;
END_RCPP
}
// frechet_intrinsic
arma::vec frechet_intrinsic(arma::mat x, arma::cube X, std::string mfdname);
RcppExport SEXP _RiemBaseExt_frechet_intrinsic(SEXP xSEXP, SEXP XSEXP, SEXP mfdnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type mfdname(mfdnameSEXP);
    rcpp_result_gen = Rcpp::wrap(frechet_intrinsic(x, X, mfdname));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RiemBaseExt_pdist_intrinsic", (DL_FUNC) &_RiemBaseExt_pdist_intrinsic, 2},
    {"_RiemBaseExt_pdist_extrinsic", (DL_FUNC) &_RiemBaseExt_pdist_extrinsic, 2},
    {"_RiemBaseExt_convert_3toM", (DL_FUNC) &_RiemBaseExt_convert_3toM, 2},
    {"_RiemBaseExt_cpp_equivariant", (DL_FUNC) &_RiemBaseExt_cpp_equivariant, 2},
    {"_RiemBaseExt_cpp_distint", (DL_FUNC) &_RiemBaseExt_cpp_distint, 2},
    {"_RiemBaseExt_cpp_dist2int", (DL_FUNC) &_RiemBaseExt_cpp_dist2int, 3},
    {"_RiemBaseExt_cpp_distext", (DL_FUNC) &_RiemBaseExt_cpp_distext, 2},
    {"_RiemBaseExt_cpp_dist2ext", (DL_FUNC) &_RiemBaseExt_cpp_dist2ext, 3},
    {"_RiemBaseExt_cpp_dispersion", (DL_FUNC) &_RiemBaseExt_cpp_dispersion, 3},
    {"_RiemBaseExt_frechet_extrinsic", (DL_FUNC) &_RiemBaseExt_frechet_extrinsic, 2},
    {"_RiemBaseExt_frechet_intrinsic", (DL_FUNC) &_RiemBaseExt_frechet_intrinsic, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_RiemBaseExt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
